import React, { useEffect, useState } from "react";
import {
  Modal,
  Form,
  Input,
  Select,
  Switch,
  InputNumber,
  Button,
  Tabs,
} from "antd";
import {
  getTypeORMNativeTypes,
  getADBExtendTypes,
  getFieldTypeConfig,
  getFieldTypeHint,
  isIDType,
  requiresLengthConfig,
  requiresPrecisionConfig,
  requiresScaleConfig,
  shouldShowConfig,
  getDefaultValueOptions,
//   supportsRelationConfig,
} from "@/utils/fieldTypeConfig";
import type { ADBField, Project } from "@/types/storage";
import { eventBus, EVENTS } from '@/utils/eventBus';
import { v4 as uuidv4 } from 'uuid';
import { projectStore } from '@/stores/projectStore';

const { Option } = Select;

interface FieldFormValues {
  code?: string;
  label?: string;
  type?: string;
  length?: number;
  nullable?: boolean;
  unique?: boolean;
  default?: string;
  primary?: boolean;
  precision?: number;
  scale?: number;
  generated?: boolean | "increment" | "uuid" | "rowid";
  comment?: string;
  status?: "enabled" | "disabled" | "archived";
  orderIndex?: number;

  // ADB Êâ©Â±ïÁ±ªÂûãÈÖçÁΩÆ
  extendType?: string;
  mediaConfig?: {
    mediaType: "image" | "video" | "audio" | "document" | "file";
    formats: string[];
    maxSize?: number;
    isMultiple?: boolean;
    storagePath?: string;
  };
  enumConfig?: {
    enum: Record<string, string | number>;
    isMultiple?: boolean;
    default?: string | number;
  };
  autoIncrementIdConfig?: {
    startValue?: number;
    increment?: number;
    sequenceName?: string;
    isPrimaryKey?: boolean;
    description?: string;
  };
  guidIdConfig?: {
    version?: "v1" | "v4" | "v5";
    format?: "default" | "braced" | "binary" | "urn";
    isPrimaryKey?: boolean;
    description?: string;
    generateOnInsert?: boolean;
  };
  snowflakeIdConfig?: {
    machineId?: number;
    datacenterId?: number;
    epoch?: number;
    isPrimaryKey?: boolean;
    description?: string;
    generateOnInsert?: boolean;
    format?: "number" | "string";
  };
}

interface FieldEditModalProps {
  visible: boolean;
  editingField: ADBField | null;
  form: any;
  formValues: FieldFormValues;
  selectedEnumCode: string;
  enumDisplayText: string;
  project: Project;
  selectedEnumCodeState: string;
  setFormValues: React.Dispatch<React.SetStateAction<FieldFormValues>>;
  setSelectedEnumCode: React.Dispatch<React.SetStateAction<string>>;
  setEnumDisplayText: React.Dispatch<React.SetStateAction<string>>;
  setIsEnumSelectModalVisible: React.Dispatch<React.SetStateAction<boolean>>;
  handleEnumSelect: (enumCode: string) => void;
  handleEnumClear: () => void;
  onFinish: (values: FieldFormValues) => void;
  onCancel: () => void;
  defaultActiveTab?: string; // ÈªòËÆ§ÊøÄÊ¥ªÁöÑTab
}

const FieldEditModal: React.FC<FieldEditModalProps> = ({
  visible,
  editingField,
  form,
  formValues,
  selectedEnumCode,
  enumDisplayText,
  project,
  selectedEnumCodeState,
  setFormValues,
//   setSelectedEnumCode,
//   setEnumDisplayText,
  setIsEnumSelectModalVisible,
//   handleEnumSelect,
  handleEnumClear,
  onFinish,
  onCancel,
  defaultActiveTab = 'ai',
}) => {
  const [activeTab, setActiveTab] = useState<string>(defaultActiveTab);
  const [aiForm] = Form.useForm();
  
  // Â§ÑÁêÜAIÂàõÂª∫Â≠óÊÆµ
  const handleAICreateField = async (values: { prompt: string }) => {
    try {
      // ÂÖàÊ∑ªÂä†ÂÆû‰ΩìÂà∞AI Chat‰∏ä‰∏ãÊñá
      const entityId = editingField?.entityId || Object.keys(project.schema.entities)[0];
      const entity = project.schema.entities[entityId];
      if (entity) {
        const entityContext = {
          id: uuidv4(),
          type: 'entity' as const,
          entityCode: entity.entityInfo.code,
          entityName: entity.entityInfo.label || entity.entityInfo.code,
          description: `${entity.entityInfo.label || entity.entityInfo.code}(${entity.entityInfo.code})`
        };
        projectStore.addAIChatContext(entityContext);
      }

      // ÊûÑÂª∫ÂÆåÊï¥ÁöÑAIÊèêÁ§∫ËØç
      const fullPrompt = `ËØ∑Â∏ÆÊàë‰∏∫ÂÆû‰Ωì"${entity?.entityInfo.label || 'ÂΩìÂâçÂÆû‰Ωì'}"ÂàõÂª∫‰∏Ä‰∏™ÊàñÂ§ö‰∏™Êñ∞ÁöÑÂ≠óÊÆµ„ÄÇ‰ª•‰∏ãÊòØÈúÄÊ±ÇÊèèËø∞Ôºö

${values.prompt}

Ê≥®ÊÑèÔºö
1. Âú®Êú¨‰ΩìÁ≥ª‰∏≠ Ë°® Âíå ÂÆû‰Ωì ÊòØÂêå‰∏Ä‰∏™Ê¶ÇÂøµ
2. Âú®Êú¨‰ΩìÁ≥ª‰∏≠ Â≠óÊÆµ Âíå Âàó ÊòØÂêå‰∏Ä‰∏™Ê¶ÇÂøµ
3. ËØ∑Âü∫‰∫éÈúÄÊ±ÇÊèèËø∞Â±ïÂºÄËÆæËÆ°Ôºå‰∏çË¶ÅÈÅóÊºè‰ªª‰ΩïÈúÄÊ±ÇÔºåÂπ∂Á°Æ‰øùËÆæËÆ°ÁªìÊûúÁ¨¶ÂêàÊú¨‰ΩìÁ≥ªÁöÑËÆæËÆ°ËßÑËåÉ
4. ËØ∑ËÄÉËôëÂ≠óÊÆµÁöÑÊï∞ÊçÆÁ±ªÂûã„ÄÅÈïøÂ∫¶„ÄÅÊòØÂê¶ÂèØÁ©∫„ÄÅÈªòËÆ§ÂÄºÁ≠âÂ±ûÊÄß
`.replace(/\n/g, '\n\n');

      // ÈÄöËøá‰∫ã‰ª∂ÊÄªÁ∫øÂèëÈÄÅÊ∂àÊÅØÂà∞AI Chat
      console.log('üöÄ ÈÄöËøá‰∫ã‰ª∂ÊÄªÁ∫øÂèëÈÄÅÂ≠óÊÆµÂàõÂª∫Ê∂àÊÅØÂà∞AI Chat:', fullPrompt);
      eventBus.emit(EVENTS.SEND_MESSAGE_TO_AI_CHAT, fullPrompt);
      
      // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
      onCancel();
      
    } catch (error) {
      console.error('AIÂàõÂª∫Â≠óÊÆµÂ§±Ë¥•:', error);
    }
  };
  
  // Ëé∑ÂèñÊâÄÊúâÊîØÊåÅÁöÑÁ±ªÂûã
  const typeormNativeTypes = getTypeORMNativeTypes();
  const adbExtendTypes = getADBExtendTypes();

  // Ëé∑ÂèñÂΩìÂâçÈÄâ‰∏≠ÁöÑÊûö‰∏æÈÄâÈ°π
  const getCurrentEnumOptions = () => {
    if (!selectedEnumCodeState) return [];
    const selectedEnum = Object.values(project.schema.enums || {}).find(
      (e) => e.enumInfo.code === selectedEnumCodeState
    );
    if (!selectedEnum) return [];

    // Â∞ÜEnumInfoOptionsÁöÑitemsËΩ¨Êç¢‰∏∫ÈÄâÈ°πÊï∞ÁªÑ
    return Object.entries(selectedEnum.enumInfo.items || {}).map(
      ([value, item]) => ({
        value,
        label: (item as { label: string }).label,
      })
    );
  };

  // Ëé∑ÂèñÂÆû‰ΩìÁöÑÂ≠óÊÆµÈÄâÈ°π
//   const getFieldOptionsForEntity = (entityId: string) => {
//     if (!entityId) return [];
//     const entity = project.schema.entities[entityId];
//     if (!entity) return [];

//     // ËøîÂõûÂÆû‰ΩìÁöÑÊâÄÊúâÂ≠óÊÆµ‰Ωú‰∏∫ÈÄâÈ°π
//     return Object.values(entity.fields || {}).map((field) => ({
//       value: field.columnInfo.id,
//       label: `${field.columnInfo.label} (${field.columnInfo.code})`,
//     }));
//   };

  // ÈáçÁΩÆË°®ÂçïÂÄº
  useEffect(() => {
    if (visible) {
      if (editingField) {
        const fieldValues = {
          code: editingField.columnInfo.code,
          label: editingField.columnInfo.label,
          comment: editingField.columnInfo.comment,
          status: editingField.columnInfo.status,
          orderIndex: editingField.columnInfo.orderIndex,
          type:
            editingField.columnInfo.extendType ||
            editingField.typeormConfig.type,
          length: editingField.typeormConfig.length,
          nullable: editingField.typeormConfig.nullable,
          unique: editingField.typeormConfig.unique,
          default: editingField.typeormConfig.default,
          primary: editingField.typeormConfig.primary,
          precision: editingField.typeormConfig.precision,
          scale: editingField.typeormConfig.scale,
          generated: editingField.typeormConfig.generated,
          // Êâ©Â±ïÁ±ªÂûãÈÖçÁΩÆ
          extendType: editingField.columnInfo.extendType,
          mediaConfig: editingField.columnInfo.mediaConfig,
          enumConfig: editingField.columnInfo.enumConfig,
          autoIncrementIdConfig: editingField.columnInfo.autoIncrementIdConfig,
          guidIdConfig: editingField.columnInfo.guidIdConfig,
          snowflakeIdConfig: editingField.columnInfo.snowflakeIdConfig,
        };
        form.setFieldsValue(fieldValues);
        setFormValues(fieldValues);
      } else {
        // Êñ∞Âª∫Â≠óÊÆµÊó∂ÈáçÁΩÆË°®Âçï
        form.resetFields();
        setFormValues({
          code: "",
          label: "",
          type: "",
          nullable: false,
          unique: false,
          primary: false,
        });
      }
    }
  }, [visible, editingField, form, setFormValues]);

  return (
    <Modal
      title={editingField ? "ÁºñËæëÂ≠óÊÆµ" : "Êñ∞Âª∫Â≠óÊÆµ"}
      open={visible}
      onCancel={onCancel}
      onOk={() => {
        if (activeTab === 'ai') {
          aiForm.submit();
        } else {
          form.submit();
        }
      }}
      width={600}
      forceRender // Âº∫Âà∂Ê∏≤ÊüìModalÂÜÖÂÆπÔºåÁ°Æ‰øùFormÂàùÂßãÂåñ
      maskClosable={false}
      destroyOnHidden={false} // ‰øùÊåÅModalÂÜÖÂÆπÔºåÁ°Æ‰øùFormÂÆû‰æãËøûÊé•
    >
      <Tabs
        activeKey={activeTab}
        onChange={setActiveTab}
        items={[
          {
            key: 'ai',
            label: 'AI',
            children: (
              <Form
                form={aiForm}
                onFinish={handleAICreateField}
                layout="vertical"
                preserve={true}
              >
                <Form.Item
                  name="prompt"
                  label="Â≠óÊÆµÈúÄÊ±ÇÊèèËø∞"
                  rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Â≠óÊÆµÂàõÂª∫ÁöÑÈúÄÊ±ÇÊèèËø∞' }]}
                >
                  <Input.TextArea 
                    rows={6} 
                    placeholder="‰æãÂ¶ÇÔºö‰∏∫ÂëòÂ∑•ÂÆû‰ΩìÊ∑ªÂä†ÂßìÂêç„ÄÅÈÇÆÁÆ±„ÄÅÊâãÊú∫Âè∑Á≠âÂü∫Êú¨‰ø°ÊÅØÂ≠óÊÆµ"
                  />
                </Form.Item>
              </Form>
            )
          },
          {
            key: 'manual',
            label: 'ÊâãÂ∑•',
            children: (
              <Form
                form={form}
                onFinish={onFinish}
                onValuesChange={(_, allValues) => {
                  // Êõ¥Êñ∞Ë°®ÂçïÂÄºÔºå‰ΩÜ‰øùÊä§ type Â≠óÊÆµ‰∏çË¢´ÊÑèÂ§ñÊ∏ÖÁ©∫
                  setFormValues((prev) => {
                    const newValues = { ...prev, ...allValues };
                    // Â¶ÇÊûú type Â≠óÊÆµÂú®Ë°®Âçï‰∏≠Â≠òÂú®‰∏î‰∏ç‰∏∫Á©∫Ôºå‰øùÊåÅÂÆÉ
                    if (allValues.type && allValues.type !== "") {
                      newValues.type = allValues.type;
                    } else if (prev.type && prev.type !== "") {
                      // Â¶ÇÊûúË°®Âçï‰∏≠ÁöÑ type ‰∏∫Á©∫‰ΩÜ‰πãÂâçÊúâÂÄºÔºå‰øùÊåÅ‰πãÂâçÁöÑÂÄº
                      newValues.type = prev.type;
                    }
                    return newValues;
                  });
                }}
                labelCol={{ span: 7 }}
                wrapperCol={{ span: 15 }}
                // labelWrap
        layout="horizontal"
        preserve={false}
        style={{ paddingTop: 30 }}
      >
        <Form.Item
          name="code"
          label="Â≠óÊÆµÊ†áËØÜ"
          hasFeedback
          rules={[
            { required: true, message: "ËØ∑ËæìÂÖ•Â≠óÊÆµÊ†áËØÜ" },
            {
              pattern: /^[a-zA-Z][a-zA-Z0-9_]*$/,
              message: "Â≠óÊÆµÊ†áËØÜÂè™ËÉΩÂåÖÂê´Â≠óÊØç„ÄÅÊï∞Â≠óÂíå‰∏ãÂàíÁ∫øÔºå‰∏î‰ª•Â≠óÊØçÂºÄÂ§¥",
            },
          ]}
        >
          <Input placeholder="‰æãÂ¶Ç: user_name" />
        </Form.Item>

        <Form.Item
          name="label"
          label="ÊòæÁ§∫ÂêçÁß∞"
          rules={[{ required: true, message: "ËØ∑ËæìÂÖ•ÊòæÁ§∫ÂêçÁß∞" }]}
        >
          <Input placeholder="‰æãÂ¶Ç: Áî®Êà∑ÂßìÂêç" />
        </Form.Item>

        <Form.Item
          name="type"
          label="Êï∞ÊçÆÁ±ªÂûã"
          rules={[{ required: true, message: "ËØ∑ÈÄâÊã©Êï∞ÊçÆÁ±ªÂûã" }]}
        >
          <Select
            placeholder="ÈÄâÊã©Êï∞ÊçÆÁ±ªÂûã"
            onChange={(value) => {
              // ÂΩìÁ±ªÂûãÊîπÂèòÊó∂ÔºåÈáçÁΩÆÁõ∏ÂÖ≥Â≠óÊÆµ
              const config = getFieldTypeConfig(value);

              // ÈáçÁΩÆ‰∏çÈÄÇÁî®ÁöÑÂ≠óÊÆµ
              const resetFields: Record<string, unknown> = {};
              if (!config.length) resetFields.length = undefined;
              if (!config.precision) resetFields.precision = undefined;
              if (!config.scale) resetFields.scale = undefined;
              if (!config.default) resetFields.default = undefined;
              if (!config.unique) resetFields.unique = false;
              if (!config.primary) resetFields.primary = false;

              // IDÁ±ªÂûãÁâπÊÆäÂ§ÑÁêÜ
              if (isIDType(value)) {
                resetFields.nullable = false;
                resetFields.unique = false;
                resetFields.primary = false;
                resetFields.default = undefined;
              }

              form.setFieldsValue(resetFields);
            }}
          >
            <Select.OptGroup label="TypeORM ÂéüÁîüÁ±ªÂûã">
              {typeormNativeTypes.map((type) => (
                <Option key={type.type} value={type.type}>
                  {type.label}
                </Option>
              ))}
            </Select.OptGroup>
            <Select.OptGroup label="ADB Êâ©Â±ïÁ±ªÂûã">
              {adbExtendTypes.map((type) => (
                <Option key={type.type} value={type.type}>
                  {type.label}
                </Option>
              ))}
            </Select.OptGroup>
          </Select>
        </Form.Item>

        {/* Êô∫ËÉΩÊèêÁ§∫ */}
        {formValues.type && getFieldTypeHint(formValues.type) && (
          <div
            style={{
              marginBottom: 16,
              textAlign: "center",
            }}
          > 
            <span
              style={{
                padding: "4px 12px",
                backgroundColor: "#f6ffed22",
                border: "1px solid #b7eb8f33",
                borderRadius: 6,
                fontSize: "12px",
                color: "rgb(198 228 183)",
                display: "inline-block",
            }}
            >
            üí° {getFieldTypeHint(formValues.type)}
            </span>
          </div>
        )}

        {/* ÈïøÂ∫¶ÂíåÁ≤æÂ∫¶ÈÖçÁΩÆ - ‰ΩøÁî®Êù°‰ª∂Ê∏≤ÊüìÔºåÈÅøÂÖçÁ©∫ÁôΩ Form.Item */}
        {formValues.type && requiresLengthConfig(formValues.type) && (
          <Form.Item
            name="length"
            label="ÈïøÂ∫¶"
            rules={[{ required: true, message: "ËØ∑ËæìÂÖ•ÈïøÂ∫¶" }]}
          >
            <InputNumber
              min={1}
              max={65535}
              placeholder="Â≠óÁ¨¶ÈïøÂ∫¶"
              style={{ width: "100%" }}
            />
          </Form.Item>
        )}

        {formValues.type && requiresPrecisionConfig(formValues.type) && (
          <div style={{ display: "flex", gap: 16 }}>
            <Form.Item
              name="precision"
              label="Á≤æÂ∫¶"
              style={{ flex: 1 }}
              rules={[{ required: true, message: "ËØ∑ËæìÂÖ•Á≤æÂ∫¶" }]}
            >
              <InputNumber
                min={1}
                max={65}
                placeholder="ÊÄª‰ΩçÊï∞"
                style={{ width: "100%" }}
              />
            </Form.Item>
            {requiresScaleConfig(formValues.type) && (
              <Form.Item name="scale" label="Â∞èÊï∞‰Ωç" style={{ flex: 1 }}>
                <InputNumber
                  min={0}
                  max={30}
                  placeholder="Â∞èÊï∞‰ΩçÊï∞"
                  style={{ width: "100%" }}
                />
              </Form.Item>
            )}
          </div>
        )}

        {/* Âü∫Á°ÄÈÖçÁΩÆÈ°π - Êô∫ËÉΩÊòæÁ§∫ */}
        <div style={{ display: "flex", gap: 16 }}>
          {/* ÂèØ‰∏∫Á©∫ - IDÁ±ªÂûã‰∏çÊòæÁ§∫ÔºåÂÖ∂‰ªñÁ±ªÂûãÊòæÁ§∫ */}
          {formValues.type && !isIDType(formValues.type) && (
            <Form.Item
              name="nullable"
              label="ÂèØ‰∏∫Á©∫"
              valuePropName="checked"
              labelCol={{ span: 12 }}
              wrapperCol={{ span: 12 }}
              style={{ flex: 1 }}
            >
              <Switch />
            </Form.Item>
          )}

          {/* ÂîØ‰∏ÄÁ∫¶Êùü - Ê†πÊçÆÁ±ªÂûãÊô∫ËÉΩÊòæÁ§∫ */}
          {formValues.type && shouldShowConfig(formValues.type, "unique") && (
            <Form.Item
              name="unique"
              label="ÂîØ‰∏ÄÁ∫¶Êùü"
              valuePropName="checked"
              labelCol={{ span: 12 }}
              wrapperCol={{ span: 12 }}
              style={{ flex: 1 }}
            >
              <Switch />
            </Form.Item>
          )}

          {/* ‰∏ªÈîÆ - Ê†πÊçÆÁ±ªÂûãÊô∫ËÉΩÊòæÁ§∫ */}
          {formValues.type && shouldShowConfig(formValues.type, "primary") && (
            <Form.Item
              name="primary"
              label="‰∏ªÈîÆ"
              valuePropName="checked"
              labelCol={{ span: 12 }}
              wrapperCol={{ span: 12 }}
              style={{ flex: 1 }}
            >
              <Switch />
            </Form.Item>
          )}
        </div>

        {/* ADB Êâ©Â±ïÁ±ªÂûãÈÖçÁΩÆ - ‰ΩøÁî®Êù°‰ª∂Ê∏≤ÊüìÔºåÈÅøÂÖçÁ©∫ÁôΩ Form.Item */}

        {/* ADB Enum ÈÖçÁΩÆ */}
        {formValues.type && shouldShowConfig(formValues.type, "enumConfig") && (
          <div>
            <Form.Item
              name={["enumConfig", "enum"]}
              label="ÈÄâÊã©Êûö‰∏æ"
              rules={[{ required: true, message: "ËØ∑ÈÄâÊã©Êûö‰∏æ" }]}
            >
              <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
                <span style={{ flex: 1, color: "#177ddc" }}>
                  {selectedEnumCode ? enumDisplayText : "Êú™ÈÄâÊã©"}
                </span>
                {selectedEnumCode ? (
                  <Button
                    type="link"
                    size="small"
                    onClick={handleEnumClear}
                    style={{ padding: 0, color: "#888" }}
                  >
                    Ê∏ÖÁ©∫ÈÄâÊã©
                  </Button>
                ) : (
                  <Button
                    type="primary"
                    size="small"
                    onClick={() => setIsEnumSelectModalVisible(true)}
                  >
                    ËØ∑ÈÄâÊã©
                  </Button>
                )}
              </div>
            </Form.Item>

            <Form.Item
              name={["enumConfig", "isMultiple"]}
              label="Â§öÈÄâÊ®°Âºè"
              valuePropName="checked"
            >
              <Switch />
            </Form.Item>

            {/* <Form.Item
              name={['enumConfig', 'default']}
              label="ÈªòËÆ§ÂÄº"
            >
              {(() => {
                const enumOptions = getCurrentEnumOptions();
                const defaultValueOptions = getDefaultValueOptions(formValues.type, enumOptions);
                
                if (defaultValueOptions && defaultValueOptions.length > 1) {
                  return (
                    <Select placeholder="ÈÄâÊã©ÈªòËÆ§ÂÄº" showSearch>
                      {defaultValueOptions.map(option => (
                        <Option key={option.value} value={option.value}>
                          {option.label}
                        </Option>
                      ))}
                    </Select>
                  );
                }
                return <Input placeholder="Êûö‰∏æÈªòËÆ§ÂÄº" />;
              })()}
            </Form.Item> */}
          </div>
        )}

        {/* Auto Increment ID ÈÖçÁΩÆ */}
        {formValues.type &&
          shouldShowConfig(formValues.type, "autoIncrementIdConfig") && (
            <div>
              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["autoIncrementIdConfig", "startValue"]}
                  label="Ëµ∑ÂßãÂÄº"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <InputNumber
                    min={1}
                    placeholder="Ëµ∑ÂßãÂÄº"
                    style={{ width: "100%" }}
                  />
                </Form.Item>

                <Form.Item
                  name={["autoIncrementIdConfig", "increment"]}
                  label="Â¢ûÈáè"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <InputNumber
                    min={1}
                    placeholder="Â¢ûÈáè"
                    style={{ width: "100%" }}
                  />
                </Form.Item>
              </div>

              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["autoIncrementIdConfig", "sequenceName"]}
                  label="Â∫èÂàóÂêçÁß∞"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <Input placeholder="PostgreSQLÂ∫èÂàóÂêçÁß∞" />
                </Form.Item>

                <Form.Item
                  name={["autoIncrementIdConfig", "isPrimaryKey"]}
                  label="ÊòØÂê¶‰∏ªÈîÆ"
                  valuePropName="checked"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <Switch />
                </Form.Item>
              </div>
            </div>
          )}

        {/* GUID ID ÈÖçÁΩÆ */}
        {formValues.type &&
          shouldShowConfig(formValues.type, "guidIdConfig") && (
            <div>
              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["guidIdConfig", "version"]}
                  label="GUIDÁâàÊú¨"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <Select placeholder="ÈÄâÊã©ÁâàÊú¨">
                    <Option value="v1">V1 - Âü∫‰∫éÊó∂Èó¥Êà≥</Option>
                    <Option value="v4">V4 - ÈöèÊú∫ÔºàÊé®ËçêÔºâ</Option>
                    <Option value="v5">V5 - Âü∫‰∫éÂëΩÂêçÁ©∫Èó¥</Option>
                  </Select>
                </Form.Item>

                <Form.Item
                  name={["guidIdConfig", "format"]}
                  label="Ê†ºÂºè"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <Select placeholder="ÈÄâÊã©Ê†ºÂºè">
                    <Option value="default">Ê†áÂáÜÊ†ºÂºè</Option>
                    <Option value="braced">Â§ßÊã¨Âè∑Ê†ºÂºè</Option>
                    <Option value="binary">‰∫åËøõÂà∂Ê†ºÂºè</Option>
                    <Option value="urn">URNÊ†ºÂºè</Option>
                  </Select>
                </Form.Item>
              </div>

              <Form.Item
                name={["guidIdConfig", "generateOnInsert"]}
                label="ÊèíÂÖ•Êó∂Ëá™Âä®ÁîüÊàê"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </div>
          )}

        {/* Snowflake ID ÈÖçÁΩÆ */}
        {formValues.type &&
          shouldShowConfig(formValues.type, "snowflakeIdConfig") && (
            <div>
              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["snowflakeIdConfig", "machineId"]}
                  label="Êú∫Âô®ID"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <InputNumber
                    min={0}
                    max={1023}
                    placeholder="0-1023"
                    style={{ width: "100%" }}
                  />
                </Form.Item>

                <Form.Item
                  name={["snowflakeIdConfig", "datacenterId"]}
                  label="Êï∞ÊçÆ‰∏≠ÂøÉID"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <InputNumber
                    min={0}
                    max={31}
                    placeholder="0-31"
                    style={{ width: "100%" }}
                  />
                </Form.Item>
              </div>

              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["snowflakeIdConfig", "format"]}
                  label="ËæìÂá∫Ê†ºÂºè"
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                  style={{ flex: 1 }}
                >
                  <Select placeholder="ÈÄâÊã©Ê†ºÂºè">
                    <Option value="number">Êï∞Â≠óÊ†ºÂºèÔºàÊé®ËçêÔºâ</Option>
                    <Option value="string">Â≠óÁ¨¶‰∏≤Ê†ºÂºè</Option>
                  </Select>
                </Form.Item>

                <Form.Item
                  name={["snowflakeIdConfig", "generateOnInsert"]}
                  label="ÊèíÂÖ•Êó∂Ëá™Âä®ÁîüÊàê"
                  valuePropName="checked"
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                >
                  <Switch />
                </Form.Item>
              </div>
            </div>
          )}

        {/* ADB Media ÈÖçÁΩÆ */}
        {formValues.type &&
          shouldShowConfig(formValues.type, "mediaConfig") && (
            <div>
              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["mediaConfig", "mediaType"]}
                  label="Â™í‰ΩìÁ±ªÂûã"
                  rules={[{ required: true, message: "ËØ∑ÈÄâÊã©Â™í‰ΩìÁ±ªÂûã" }]}
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                >
                  <Select placeholder="ÈÄâÊã©Â™í‰ΩìÁ±ªÂûã">
                    <Option value="image">ÂõæÁâá</Option>
                    <Option value="video">ËßÜÈ¢ë</Option>
                    <Option value="audio">Èü≥È¢ë</Option>
                    <Option value="document">ÊñáÊ°£</Option>
                    <Option value="file">Êñá‰ª∂</Option>
                  </Select>
                </Form.Item>

                <Form.Item
                  name={["mediaConfig", "formats"]}
                  label="ÊîØÊåÅÊ†ºÂºè"
                  rules={[{ required: true, message: "ËØ∑ËæìÂÖ•ÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºè" }]}
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                >
                  <Select
                    mode="tags"
                    placeholder="ËæìÂÖ•Êñá‰ª∂Ê†ºÂºèÔºåÂ¶Ç: jpg, png, gif"
                  >
                    <Option value="jpg">JPG</Option>
                    <Option value="png">PNG</Option>
                    <Option value="gif">GIF</Option>
                    <Option value="webp">WEBP</Option>
                    <Option value="mp4">MP4</Option>
                    <Option value="pdf">PDF</Option>
                  </Select>
                </Form.Item>
              </div>

              <div style={{ display: "flex", gap: 16 }}>
                <Form.Item
                  name={["mediaConfig", "maxSize"]}
                  label="ÊúÄÂ§ßÈôêÂà∂(MB)"
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                >
                  <InputNumber
                    min={1}
                    placeholder="Êñá‰ª∂Â§ßÂ∞èÈôêÂà∂"
                    style={{ width: "100%" }}
                  />
                </Form.Item>

                <Form.Item
                  name={["mediaConfig", "isMultiple"]}
                  label="ÂÖÅËÆ∏Â§öÊñá‰ª∂"
                  valuePropName="checked"
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                >
                  <Switch />
                </Form.Item>
              </div>

              <Form.Item name={["mediaConfig", "storagePath"]} label="Â≠òÂÇ®Ë∑ØÂæÑ">
                <Input placeholder="‰æãÂ¶Ç: uploads/avatars" />
              </Form.Item>
            </div>
          )}

        {/* ÈªòËÆ§ÂÄº - Ê†πÊçÆÁ±ªÂûãÊô∫ËÉΩÊòæÁ§∫ */}
        {formValues.type && shouldShowConfig(formValues.type, "default") && (
          <Form.Item name="default" label="ÈªòËÆ§ÂÄº">
            {(() => {
              const enumOptions = getCurrentEnumOptions();
              const defaultValueOptions = getDefaultValueOptions(
                formValues.type,
                enumOptions
              );
              if (defaultValueOptions) {
                return (
                  <Select
                    placeholder="ÈÄâÊã©ÊàñËæìÂÖ•ÈªòËÆ§ÂÄº"
                    allowClear
                    showSearch
                    filterOption={(input, option) => {
                      // ÂÖÅËÆ∏ÊêúÁ¥¢ÈÄâÈ°π
                      return (
                        option?.children
                          ?.toString()
                          .toLowerCase()
                          .includes(input.toLowerCase()) || false
                      );
                    }}
                    popupRender={(menu) => (
                      <div>
                        {menu}
                        <div
                          style={{
                            padding: "8px 12px",
                            fontSize: "12px",
                            color: "#666",
                          }}
                        >
                          üí° ÊÇ®ÂèØ‰ª•Áõ¥Êé•ËæìÂÖ•Ëá™ÂÆö‰πâÂÄº
                        </div>
                      </div>
                    )}
                  >
                    {defaultValueOptions.map((option) => (
                      <Option key={option.value} value={option.value}>
                        {option.label}
                      </Option>
                    ))}
                  </Select>
                );
              }
              return <Input placeholder="Â≠óÊÆµÈªòËÆ§ÂÄºÔºàÂèØÈÄâÔºâ" />;
            })()}
          </Form.Item>
        )}

        {/* ÂÖ≥Á≥ªÈÖçÁΩÆ - ‰ªÖÂØπÊîØÊåÅÂÖ≥Á≥ªÈÖçÁΩÆÁöÑÂ≠óÊÆµÁ±ªÂûãÊòæÁ§∫ */}
        {/* ÊöÇÊó∂Ê≥®ÈáäÊéâÂÖ≥Á≥ªÈÖçÁΩÆÈÉ®ÂàÜ */}
        {/* {formValues.type && supportsRelationConfig(formValues.type) && (
          <div style={{ 
            border: '1px solid #424242', 
            borderRadius: 6, 
            padding: 16, 
            marginTop: 16,
            backgroundColor: '#1f1f1f'
          }}>
            <div style={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              alignItems: 'center', 
              marginBottom: 16 
            }}>
              <div style={{ fontWeight: 'bold', color: '#1890ff' }}>
                üîó ÂÖ≥Á≥ªÈÖçÁΩÆ
              </div>
              <Form.Item 
                name="enableRelation" 
                valuePropName="checked" 
                noStyle
              >
                <Switch />
              </Form.Item>
            </div>
            
            <Form.Item 
              noStyle 
              shouldUpdate={(prevValues, currentValues) => 
                prevValues.enableRelation !== currentValues.enableRelation
              }
            >
              {({ getFieldValue }) => 
                getFieldValue('enableRelation') && (
                  <>
                    <Form.Item
                      name="relationType"
                      label="ÂÖ≥Á≥ªÁ±ªÂûã"
                      rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÂÖ≥Á≥ªÁ±ªÂûã' }]}
                    >
                      <Select placeholder="ÈÄâÊã©ÂÖ≥Á≥ªÁ±ªÂûã">
                        <Option value="manyToOne">Â§öÂØπ‰∏Ä (ManyToOne)</Option>
                        <Option value="oneToOne">‰∏ÄÂØπ‰∏Ä (OneToOne)</Option>
                      </Select>
                    </Form.Item>
                    
                    <Form.Item
                      name="targetEntity"
                      label="ÁõÆÊ†áÂÆû‰Ωì"
                      rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÁõÆÊ†áÂÆû‰Ωì' }]}
                    >
                      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                        <span style={{ flex: 1, color: '#177ddc' }}>
                          {getFieldValue('targetEntityName') || 'Êú™ÈÄâÊã©ÂÆû‰Ωì'}
                        </span>
                        <Button 
                          type="primary" 
                          size="small" 
                          // onClick={() => setIsEntitySelectModalVisible(true)}
                        >
                          ÈÄâÊã©ÂÆû‰Ωì
                        </Button>
                      </div>
                    </Form.Item>
                    
                    <Form.Item
                      name="targetField"
                      label="ÁõÆÊ†áÂ≠óÊÆµ"
                      rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©ÁõÆÊ†áÂ≠óÊÆµ' }]}
                    >
                      <Select placeholder="ÈÄâÊã©ÁõÆÊ†áÂ≠óÊÆµ">
                        {getFieldOptionsForEntity(getFieldValue('targetEntity')).map(option => (
                          <Option key={option.value} value={option.value}>
                            {option.label}
                          </Option>
                        ))}
                      </Select>
                    </Form.Item>
                    
                    <Form.Item
                      name="relationName"
                      label="ÂÖ≥Á≥ªÂêçÁß∞"
                    >
                      <Input placeholder="‰æãÂ¶Ç: user, orders" />
                    </Form.Item>
                  </>
                )
              }
            </Form.Item>
          </div>
        )} */}
              </Form>
            )
          }
        ]}
      />
    </Modal>
  );
};

export default FieldEditModal;
