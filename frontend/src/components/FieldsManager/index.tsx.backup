import React, { useState, useEffect, useMemo } from 'react';
import { 
  Table, 
  Button, 
  Space, 
  Tag, 
  Popconfirm, 
  Typography, 
  Empty,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  InputNumber,
  message,
  Segmented,
  Divider,
  Alert,
  Row,
  Col,
  Tabs,
  Typography as AntdTypography
} from 'antd';
import { 
  PlusOutlined, 
  EditOutlined, 
  DeleteOutlined,
  KeyOutlined,
  CheckCircleOutlined,
  SearchOutlined,
  ExclamationCircleOutlined
} from '@ant-design/icons';
import { StorageService } from '@/stores/storage';
import type { ADBEntity, ADBField, Project, ExtendedColumnInfo } from '@/types/storage';
// import type { EnumItemOptions } from 'adb-typeorm';
import type { ColumnsType } from 'antd/es/table';
import { 
  getFieldTypeConfig, 
  shouldShowConfig, 
  getDefaultValueOptions,
  getFieldTypeHint,
  isIDType,
  requiresLengthConfig,
  requiresPrecisionConfig,
  requiresScaleConfig,
  getTypeORMNativeTypes,
  getADBExtendTypes,
  supportsRelationConfig
} from '@/utils/fieldTypeConfig';
import RelationManager from '../RelationManager';
import ADBEnumManager from '../ADBEnumManager';
import type { 
  Relation, 
  RelationCreateConfig,
  RelationValidationResult,
  RelationConflict
} from '@/types/storage';
import { RelationType, CascadeType } from '@/types/storage';
import { RelationUtils } from '@/utils/relationUtils';




const { Text, Title } = Typography;
const { Option } = Select;

interface FieldsManagerProps {
  entity: ADBEntity;
  project: Project;
  onEntityUpdate: (project: Project) => void;
}


const FieldsManager: React.FC<FieldsManagerProps> = ({ entity, project, onEntityUpdate }) => {
  const [fields, setFields] = useState<ADBField[]>([]);
  const [activeTab, setActiveTab] = useState<'fields' | 'indexes' | 'relations'>('fields'); // 新增状态用于切换视图
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isRelationModalVisible, setIsRelationModalVisible] = useState(false);
  const [isEnumModalVisible, setIsEnumModalVisible] = useState(false);
  const [isEnumSelectModalVisible, setIsEnumSelectModalVisible] = useState(false);
  const [isEntitySelectModalVisible, setIsEntitySelectModalVisible] = useState(false);
  const [selectedEnumCode, setSelectedEnumCode] = useState<string>('');
  const [enumDisplayText, setEnumDisplayText] = useState<string>('');
  const [editingField, setEditingField] = useState<ADBField | null>(null);
  const [formValues, setFormValues] = useState<FieldFormValues>({
    code: '',
    label: '',
    type: '',
    nullable: false,
    unique: false,
    primary: false,
  });
  const [form] = Form.useForm();
  const [isRelationCreateModalVisible, setIsRelationCreateModalVisible] = useState(false);
  const [editingRelationInFields, setEditingRelationInFields] = useState<Relation | null>(null);
  const [relationValidationResult, setRelationValidationResult] = useState<RelationValidationResult | null>(null);
  const [relationConflicts, setRelationConflicts] = useState<RelationConflict[]>([]);
  const [relationForm] = Form.useForm();
  
  // 获取所有支持的类型
  const typeormNativeTypes = getTypeORMNativeTypes();
  const adbExtendTypes = getADBExtendTypes();

  // 获取所有实体
  const entities = useMemo(() => {
    return Object.values(project.schema.entities || {});
  }, [project.schema.entities]);

  // 获取当前实体的关系列表
  const entityRelations = useMemo(() => {
    if (!project.schema.relations) return [];
    return project.schema.relations.filter(relation => 
      relation.from.entityId === entity.entityInfo.id || 
      relation.to.entityId === entity.entityInfo.id
    );
  }, [project.schema.relations, entity.entityInfo.id]);

  useEffect(() => {
    const fieldList = Object.values(entity.fields || {});
    setFields(fieldList);
  }, [entity.fields]);



interface FieldFormValues {
  code?: string;
  label?: string;
  type?: string;
  length?: number;
  nullable?: boolean;
  unique?: boolean;
  default?: string;
  primary?: boolean;
  precision?: number;
  scale?: number;
  generated?: boolean | 'increment' | 'uuid' | 'rowid';
  comment?: string;
  status?: 'enabled' | 'disabled' | 'archived';
  orderIndex?: number;
  
  // ADB 扩展类型配置
  extendType?: string;
  mediaConfig?: {
    mediaType: 'image' | 'video' | 'audio' | 'document' | 'file';
    formats: string[];
    maxSize?: number;
    isMultiple?: boolean;
    storagePath?: string;
  };
  enumConfig?: {
    enum: Record<string, string | number>;
    isMultiple?: boolean;
    default?: string | number;
  };
  autoIncrementIdConfig?: {
    startValue?: number;
    increment?: number;
    sequenceName?: string;
    isPrimaryKey?: boolean;
    description?: string;
  };
  guidIdConfig?: {
    version?: 'v1' | 'v4' | 'v5';
    format?: 'default' | 'braced' | 'binary' | 'urn';
    isPrimaryKey?: boolean;
    description?: string;
    generateOnInsert?: boolean;
  };
  snowflakeIdConfig?: {
    machineId?: number;
    datacenterId?: number;
    epoch?: number;
    isPrimaryKey?: boolean;
    description?: string;
    generateOnInsert?: boolean;
    format?: 'number' | 'string';
  };
}

// 处理新建/编辑字段
  const handleSaveField = async (values: FieldFormValues) => {
    try {
      const now = new Date().toISOString();
      const fieldId = editingField?.columnInfo.id || `field_${Date.now()}`;
      
      // 判断是否为 ADB 扩展类型
      const isADBType = values.type?.startsWith('adb-') || false;
      const extendType = isADBType ? values.type : undefined;
      
      // 根据扩展类型设置对应的配置
      const extendConfig: Partial<ExtendedColumnInfo> = {};
      if (extendType === 'adb-media' && values.mediaConfig) {
        extendConfig.mediaConfig = values.mediaConfig;
      } else if (extendType === 'adb-enum' && values.enumConfig) {
        extendConfig.enumConfig = values.enumConfig;
      } else if (extendType === 'adb-auto-increment-id' && values.autoIncrementIdConfig) {
        extendConfig.autoIncrementIdConfig = values.autoIncrementIdConfig;
      } else if (extendType === 'adb-guid-id' && values.guidIdConfig) {
        extendConfig.guidIdConfig = values.guidIdConfig;
      } else if (extendType === 'adb-snowflake-id' && values.snowflakeIdConfig) {
        extendConfig.snowflakeIdConfig = values.snowflakeIdConfig;
      }

      const newField: ADBField = {
        columnInfo: {
          id: fieldId,
          label: values.label || '',
          code: values.code || '',
          comment: values.code || '', // 使用code作为comment的默认值
          status: 'enabled', // 默认启用
          orderIndex: 0, // 默认排序
          extendType,
          ...extendConfig
        },
        typeormConfig: {
          type: values.type || 'varchar', // 直接使用选择的类型，ADB-TypeORM 会处理类型映射
          length: values.length,
          nullable: values.nullable !== false,
          unique: values.unique || false,
          default: values.default,
          comment: values.code || '', // 使用code作为comment的默认值
          primary: values.primary || false,
          precision: values.precision,
          scale: values.scale,
          generated: values.generated
        },
        createdAt: editingField?.createdAt || now,
        updatedAt: now
      };

      // 更新实体
      const updatedEntity = {
        ...entity,
        fields: {
          ...entity.fields,
          [fieldId]: newField
        },
        updatedAt: now
      };

      // 更新项目
      const updatedProject = {
        ...project,
        schema: {
          ...project.schema,
          entities: {
            ...project.schema.entities,
            [entity.entityInfo.id]: updatedEntity
          }
        }
      };

      // 保存到localStorage
      StorageService.saveProject(updatedProject);
      
      // 立即更新本地状态
      setFields(Object.values(updatedEntity.fields || {}));
      
      // 通知父组件更新
      onEntityUpdate(updatedProject);

      setIsModalVisible(false);
      setEditingField(null);
      
      message.success(`字段${editingField ? '更新' : '创建'}成功`);
    } catch (error) {
      console.error('保存字段失败:', error);
      message.error('保存字段失败');
    }
  };

  // 处理删除字段
  const handleDeleteField = async (field: ADBField) => {
    try {
      const now = new Date().toISOString();
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { [field.columnInfo.id]: _, ...remainingFields } = entity.fields;
      
      const updatedEntity = {
        ...entity,
        fields: remainingFields,
        updatedAt: now
      };

      const updatedProject = {
        ...project,
        schema: {
          ...project.schema,
          entities: {
            ...project.schema.entities,
            [entity.entityInfo.id]: updatedEntity
          }
        }
      };

      StorageService.saveProject(updatedProject);
      
      // 立即更新本地状态
      setFields(Object.values(updatedEntity.fields || {}));
      
      // 通知父组件更新
      onEntityUpdate(updatedProject);
      
      message.success('字段删除成功');
    } catch (error) {
      console.error('删除字段失败:', error);
      message.error('删除字段失败');
    }
  };

  // 处理编辑关系
  const handleEditRelation = (relation: Relation) => {
    // 设置正在编辑的关系
    setEditingRelationInFields(relation);
    // 打开关系创建模态框
    setIsRelationCreateModalVisible(true);
  };

  // 处理新建关系
  const handleCreateRelation = () => {
    setEditingRelationInFields(null);
    setIsRelationCreateModalVisible(true);
  };

  // 处理删除关系
  const handleDeleteRelation = (relationId: string) => {
    const updatedRelations = project.schema.relations?.filter(r => r.id !== relationId) || [];
    const updatedProject = {
      ...project,
      schema: {
        ...project.schema,
        relations: updatedRelations,
      },
    };
    StorageService.saveProject(updatedProject);
    onEntityUpdate(updatedProject);
    message.success('关系删除成功');
  };

  // 处理编辑字段
  const handleEditField = (field: ADBField) => {
    setEditingField(field);
    
    // 设置枚举选择状态
    if (field.columnInfo.enumConfig?.enum) {
      const selectedEnum = Object.values(project.schema.enums || {}).find(e => e.enumInfo.code === field.columnInfo.enumConfig?.enum);
      if (selectedEnum) {
        setSelectedEnumCode(selectedEnum.enumInfo.code);
        setEnumDisplayText(`${selectedEnum.enumInfo.code}（${selectedEnum.enumInfo.description || selectedEnum.enumInfo.label}）`);
      }
    } else {
      setSelectedEnumCode('');
      setEnumDisplayText('');
    }
    
    setIsModalVisible(true);
  };

  // 处理新建字段
  const handleCreateField = () => {
    setEditingField(null);
    form.resetFields();
    setFormValues({
      code: '',
      label: '',
      type: '',
      nullable: false,
      unique: false,
      primary: false,
    });
    setSelectedEnumCode('');
    setEnumDisplayText('');
    setIsModalVisible(true);
  };

  // 处理枚举选择
  const handleEnumSelect = (enumCode: string) => {
    const selectedEnum = Object.values(project.schema.enums || {}).find(e => e.enumInfo.code === enumCode);
    if (selectedEnum) {
      setSelectedEnumCode(enumCode);
      setEnumDisplayText(`${selectedEnum.enumInfo.code}（${selectedEnum.enumInfo.description || selectedEnum.enumInfo.label}）`);
      form.setFieldValue('enumConfig', {
        ...form.getFieldValue('enumConfig'),
        enum: enumCode
      });
    }
  };

  // 处理枚举清空
  const handleEnumClear = () => {
    setSelectedEnumCode('');
    setEnumDisplayText('');
    form.setFieldValue('enumConfig', {
      ...form.getFieldValue('enumConfig'),
      enum: ''
    });
  };

  // 获取当前选中的枚举选项
  const getCurrentEnumOptions = () => {
    if (!selectedEnumCode) return [];
    const selectedEnum = Object.values(project.schema.enums || {}).find(e => e.enumInfo.code === selectedEnumCode);
    if (!selectedEnum) return [];
    
    // 将EnumInfoOptions的items转换为选项数组
    return Object.entries(selectedEnum.enumInfo.items || {}).map(([value, item]) => ({
      value,
      label: (item as { label: string }).label
    }));
  };

  // 获取实体的字段选项
  const getFieldOptionsForEntity = (entityId: string) => {
    if (!entityId) return [];
    const entity = project.schema.entities[entityId];
    if (!entity) return [];
    
    // 返回实体的所有字段作为选项
    return Object.values(entity.fields || {}).map(field => ({
      value: field.columnInfo.id,
      label: `${field.columnInfo.label} (${field.columnInfo.code})`
    }));
  };

  // 枚举选择模态框组件
  interface EnumSelectModalProps {
    visible: boolean;
    onCancel: () => void;
    onConfirm: (enumCode: string) => void;
    project: Project;
    selectedEnumCode: string;
  }

  const EnumSelectModal: React.FC<EnumSelectModalProps> = ({
    visible,
    onCancel,
    onConfirm,
    project,
    selectedEnumCode
  }) => {
    const [tempSelectedEnumCode, setTempSelectedEnumCode] = useState<string>(selectedEnumCode);
    const [searchText, setSearchText] = useState('');
    const [viewMode, setViewMode] = useState<'list' | 'tree'>('list');

    // 获取所有启用的枚举
    const enabledEnums = useMemo(() => {
      return Object.values(project.schema.enums || {}).filter(() => {
        // 这里假设所有枚举都是启用状态，因为ADBEnumDefinition没有status字段
        return true;
      });
    }, [project.schema.enums]);

    // 过滤枚举列表
    const filteredEnums = useMemo(() => enabledEnums.filter(enumItem =>
      enumItem.enumInfo.code.toLowerCase().includes(searchText.toLowerCase()) ||
      enumItem.enumInfo.label.toLowerCase().includes(searchText.toLowerCase()) ||
      enumItem.enumInfo.description?.toLowerCase().includes(searchText.toLowerCase())
    ), [enabledEnums, searchText]);

    // 构建树形数据
    const treeData = useMemo(() => {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const codeMap = new Map<string, any>();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const result: any[] = [];
      const allCodes: string[] = [];

      filteredEnums.forEach(enumItem => {
        const codes = enumItem.enumInfo.code.split(':');
        let currentPath = '';
        
        codes.forEach((code: string, index: number) => {
          const parentPath = currentPath;
          currentPath = currentPath ? `${currentPath}:${code}` : code;
          allCodes.push(currentPath);
          
          if (!codeMap.has(currentPath)) {
            const node = {
              value: currentPath,
              label: index === codes.length - 1 ? enumItem.enumInfo.label : code,
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              children: [] as any[],
              parentPath: parentPath || undefined,
              enumInfo: index === codes.length - 1 ? enumItem.enumInfo : undefined,
              createdAt: index === codes.length - 1 ? enumItem.createdAt : undefined,
              updatedAt: index === codes.length - 1 ? enumItem.updatedAt : undefined
            };
            codeMap.set(currentPath, node);
          }
        });
      });

      // 构建树形结构
      codeMap.forEach((node) => {
        if (node.parentPath) {
          const parent = codeMap.get(node.parentPath);
          if (parent) {
            parent.children = parent.children || [];
            parent.children.push(node);
          }
        }
      });

      // 只返回根节点
      const rootNodes = Array.from(codeMap.values()).filter(node => !node.parentPath);
      
      // 递归处理节点
      const processNode = (node: any): any => {
        if (node.children && node.children.length > 0) {
          node.children = node.children.map(processNode);
        }
        return node;
      };

      return rootNodes.map(processNode);
    }, [filteredEnums]);

    // 表格列定义
    const columns = useMemo(() => [
      {
        title: '代码',
        dataIndex: 'enumInfo.code',
        key: 'code',
        width: viewMode === 'tree' ? 200 : undefined,
        ellipsis: true,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        render: (text: string, record: any) => {
          if (viewMode === 'tree' && record.children && record.children.length > 0) {
            return null;
          }
          return <Tag color="blue">{record.enumInfo?.code || record.value}</Tag>;
        }
      },
      {
        title: '显示名称',
        dataIndex: 'enumInfo.label',
        key: 'label',
        width: viewMode === 'tree' ? 200 : undefined,
        ellipsis: true,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        render: (text: string, record: any) => {
          if (viewMode === 'tree' && record.children && record.children.length > 0) {
            return null;
          }
          const label = viewMode === 'tree' ? (record.enumInfo?.label || text) : (record.enumInfo?.label || text);
          return label;
        }
      },
      {
        title: '描述',
        dataIndex: 'enumInfo.description',
        key: 'description',
        width: viewMode === 'tree' ? 200 : undefined,
        ellipsis: true,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        render: (text: string, record: any) => {
          if (viewMode === 'tree' && record.children && record.children.length > 0) {
            return null;
          }
          const description = viewMode === 'tree' ? (record.enumInfo?.description || text) : (record.enumInfo?.description || text);
          return description || '-';
        }
      },
      {
        title: '选项数量',
        key: 'optionsCount',
        width: 80,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        render: (record: any) => {
          if (viewMode === 'tree' && record.children && record.children.length > 0) {
            return null;
          }
          const enumData = viewMode === 'tree' ? record : record;
          const options = Object.entries(enumData.enumInfo?.items || {});
          return <Tag color="green">{options.length}</Tag>;
        }
      }
    ], [viewMode]);

    // 处理枚举选择
    const handleEnumClick = (enumCode: string) => {
      setTempSelectedEnumCode(enumCode);
    };

    // 处理确认选择
    const handleConfirm = () => {
      if (tempSelectedEnumCode) {
        onConfirm(tempSelectedEnumCode);
      }
    };

    // 重置临时选择状态
    useEffect(() => {
      if (visible) {
        setTempSelectedEnumCode(selectedEnumCode);
      }
    }, [visible, selectedEnumCode]);

    return (
      <Modal
        title="选择枚举"
        open={visible}
        onCancel={onCancel}
        onOk={handleConfirm}
        width={800}
        okText="确认选择"
        cancelText="取消"
        okButtonProps={{ disabled: !tempSelectedEnumCode }}
        destroyOnHidden
      >
        {/* 搜索和视图切换 */}
        <div style={{ marginBottom: 16 }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Space>
              <Segmented
                options={[
                  { label: '列表', value: 'list' },
                  { label: '树形', value: 'tree' }
                ]}
                value={viewMode}
                onChange={(value) => setViewMode(value as 'list' | 'tree')}
              />
              <Input
                placeholder="搜索枚举代码、名称或描述"
                prefix={<SearchOutlined />}
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                style={{ width: 300 }}
              />
            </Space>
          </div>
        </div>

        {/* 表格区域 */}
        <div style={{ height: 400, overflow: 'auto' }}>
          <Table
            columns={columns}
            dataSource={viewMode === 'list' ? filteredEnums : treeData}
            pagination={false}
            rowKey={viewMode === 'list' ? "id" : "value"}
            size="small"
            onRow={(record) => ({
              onClick: () => {
                const enumCode = viewMode === 'tree' ? record.enumInfo?.code : record.enumInfo?.code;
                if (enumCode) {
                  handleEnumClick(enumCode);
                }
              },
              style: {
                cursor: 'pointer',
                backgroundColor: tempSelectedEnumCode === (viewMode === 'tree' ? record.enumInfo?.code : record.enumInfo?.code) 
                  ? 'rgba(139, 69, 255, 0.1)' : undefined, // 半透明紫色背景
              }
            })}
            expandable={viewMode === 'tree' ? {
              childrenColumnName: "children",
              indentSize: 20
            } : undefined}
          />
        </div>
      </Modal>
    );
  };

  // 实体选择模态框组件
  interface EntitySelectModalProps {
    visible: boolean;
    onCancel: () => void;
    onConfirm: (entityId: string, entityName: string) => void;
    project: Project;
  }

  const EntitySelectModal: React.FC<EntitySelectModalProps> = ({
    visible,
    onCancel,
    onConfirm,
    project
  }) => {
    const [tempSelectedEntityId, setTempSelectedEntityId] = useState<string>('');
    const [tempSelectedEntityName, setTempSelectedEntityName] = useState<string>('');
    const [searchText, setSearchText] = useState('');

    // 获取所有实体
    const allEntities = useMemo(() => {
      return Object.values(project.schema.entities || {});
    }, [project.schema.entities]);

    // 过滤实体列表
    const filteredEntities = useMemo(() => allEntities.filter(entity =>
      entity.entityInfo.code.toLowerCase().includes(searchText.toLowerCase()) ||
      entity.entityInfo.label.toLowerCase().includes(searchText.toLowerCase()) ||
      entity.entityInfo.description?.toLowerCase().includes(searchText.toLowerCase())
    ), [allEntities, searchText]);

    // 处理实体选择
    const handleEntityClick = (entity: ADBEntity) => {
      setTempSelectedEntityId(entity.entityInfo.id);
      setTempSelectedEntityName(entity.entityInfo.label || entity.entityInfo.code);
    };

    // 处理确认选择
    const handleConfirm = () => {
      if (tempSelectedEntityId) {
        onConfirm(tempSelectedEntityId, tempSelectedEntityName);
      }
    };

    return (
      <Modal
        title="选择目标实体"
        open={visible}
        onCancel={onCancel}
        onOk={handleConfirm}
        width={800}
        okText="确认选择"
        cancelText="取消"
        okButtonProps={{ disabled: !tempSelectedEntityId }}
        destroyOnHidden
      >
        {/* 搜索框 */}
        <div style={{ marginBottom: 16 }}>
          <Input
            placeholder="搜索实体代码、名称或描述"
            prefix={<SearchOutlined />}
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
            style={{ width: '100%' }}
          />
        </div>

        {/* 实体列表 */}
        <div style={{ height: 400, overflow: 'auto' }}>
          <Table
            columns={[
              {
                title: '代码',
                dataIndex: ['entityInfo', 'code'],
                key: 'code',
              },
              {
                title: '显示名称',
                dataIndex: ['entityInfo', 'label'],
                key: 'label',
              },
              {
                title: '描述',
                dataIndex: ['entityInfo', 'description'],
                key: 'description',
                ellipsis: true,
                render: (text: string) => text || '-',
              }
            ]}
            dataSource={filteredEntities}
            pagination={false}
            rowKey={(record) => record.entityInfo.id}
            size="small"
            onRow={(record) => ({
              onClick: () => handleEntityClick(record),
              style: {
                cursor: 'pointer',
                backgroundColor: tempSelectedEntityId === record.entityInfo.id 
                  ? 'rgba(139, 69, 255, 0.1)' : undefined, // 半透明紫色背景
              }
            })}
          />
        </div>
      </Modal>
    );
  };

  // 关系表格列定义
  const relationColumns: ColumnsType<Relation> = [
    {
      title: '关系类型',
      dataIndex: 'type',
      key: 'type',
      width: 100,
      render: (type: RelationType) => (
        <Tag color={getRelationTypeColor(type)}>
          {RelationUtils.getRelationTypeDisplayName(type)}
        </Tag>
      ),
    },
    {
      title: '源实体',
      dataIndex: ['from', 'entityName'],
      key: 'from',
      width: 120,
    },
    {
      title: '目标实体',
      dataIndex: ['to', 'entityName'],
      key: 'to',
      width: 120,
    },
    {
      title: '关系名称',
      dataIndex: 'name',
      key: 'name',
      width: 120,
    },
    {
      title: '反向名称',
      dataIndex: 'inverseName',
      key: 'inverseName',
      width: 120,
      render: (inverseName: string) => inverseName || '-',
    },
    {
      title: '级联操作',
      dataIndex: ['config', 'cascade'],
      key: 'cascade',
      width: 80,
      render: (cascade: boolean) => (
        <Tag color={cascade ? 'green' : 'default'}>
          {cascade ? '是' : '否'}
        </Tag>
      ),
    },
    {
      title: '删除策略',
      dataIndex: ['config', 'onDelete'],
      key: 'onDelete',
      width: 100,
      render: (onDelete: CascadeType) => (
        <Tag color={getCascadeTypeColor(onDelete)}>
          {RelationUtils.getCascadeTypeDisplayName(onDelete)}
        </Tag>
      ),
    },
    {
      title: '操作',
      key: 'actions',
      width: 120,
      render: (_, record) => (
        <Space size="small">
          <Button
            type="link"
            icon={<EditOutlined />}
            size="small"
            onClick={() => handleEditRelation(record)}
          />
          <Popconfirm
            title="确定删除此关系？"
            description="删除关系可能会影响数据完整性，请谨慎操作。"
            icon={<ExclamationCircleOutlined style={{ color: 'red' }} />}
            onConfirm={() => handleDeleteRelation(record.id)}
            okText="确定"
            cancelText="取消"
          >
            <Button
              type="link"
              icon={<DeleteOutlined />}
              size="small"
              danger
            />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  // 获取关系类型颜色
  const getRelationTypeColor = (type: RelationType): string => {
    const colors = {
      [RelationType.ONE_TO_ONE]: 'blue',
      [RelationType.ONE_TO_MANY]: 'green',
      [RelationType.MANY_TO_ONE]: 'orange',
      [RelationType.MANY_TO_MANY]: 'purple',
    };
    return colors[type];
  };

  // 获取级联类型颜色
  const getCascadeTypeColor = (type: CascadeType): string => {
    const colors = {
      [CascadeType.CASCADE]: 'red',
      [CascadeType.SET_NULL]: 'orange',
      [CascadeType.RESTRICT]: 'blue',
      [CascadeType.NO_ACTION]: 'default',
    };
    return colors[type];
  };

  // 表格列定义
  const columns: ColumnsType<ADBField> = [
    {
      title: '字段标识',
      dataIndex: ['columnInfo', 'code'],
      key: 'code',
      width: 120,
      render: (code: string, record: ADBField) => (
        <div>
          <code style={{ color: '#1890ff' }}>{code}</code>
          {record.typeormConfig.primary && (
            <KeyOutlined style={{ color: '#f39c12', marginLeft: 4 }} title="主键" />
          )}
          {record.typeormConfig.unique && (
            <CheckCircleOutlined style={{ color: '#52c41a', marginLeft: 4 }} title="唯一" />
          )}
        </div>
      )
    },
    {
      title: '显示名称',
      dataIndex: ['columnInfo', 'label'],
      key: 'label',
      width: 120
    },
    {
      title: '数据类型',
      key: 'type',
      width: 120,
      render: (_, record: ADBField) => {
        const { type, length, precision, scale } = record.typeormConfig;
        const { extendType } = record.columnInfo;
        
        // 如果有扩展类型，优先显示扩展类型
        const displayType = extendType || type;
        let typeDisplay = displayType;
        
        if (length) {
          typeDisplay += `(${length})`;
        } else if (precision !== undefined && scale !== undefined) {
          typeDisplay += `(${precision},${scale})`;
        } else if (precision !== undefined) {
          typeDisplay += `(${precision})`;
        }
        
        // 根据类型设置不同的颜色
        const getTagColor = (type: string): string => {
          if (type.startsWith('adb-')) {
            return 'purple'; // ADB 扩展类型使用紫色
          }
          return 'blue'; // TypeORM 原生类型使用蓝色
        };
        
        return <Tag color={getTagColor(displayType)}>{typeDisplay.toUpperCase()}</Tag>;
      }
    },
    {
      title: '约束',
      key: 'constraints',
      width: 100,
      render: (_, record: ADBField) => (
        <Space size={4}>
          {!record.typeormConfig.nullable && <Tag color="red">NOT NULL</Tag>}
          {record.typeormConfig.unique && <Tag color="green">UNIQUE</Tag>}
          {record.typeormConfig.default !== undefined && (
            <Tag color="orange">DEFAULT</Tag>
          )}
        </Space>
      )
    },
    {
      title: '默认值',
      dataIndex: ['typeormConfig', 'default'],
      key: 'default',
      width: 100,
      render: (defaultValue: string | number | boolean | undefined) => (
        defaultValue !== undefined ? <code>{String(defaultValue)}</code> : <Text type="secondary">-</Text>
      )
    },
    // {
    //   title: '状态',
    //   dataIndex: ['columnInfo', 'status'],
    //   key: 'status',
    //   width: 80,
    //   render: (status: string) => {
    //     const colors = { enabled: 'green', disabled: 'orange', archived: 'red' };
    //     const labels = { enabled: '启用', disabled: '禁用', archived: '归档' };
    //     return (
    //       <Tag color={colors[status as keyof typeof colors]}>
    //         {labels[status as keyof typeof labels]}
    //       </Tag>
    //     );
    //   }
    // },
    // {
    //   title: '说明',
    //   dataIndex: ['columnInfo', 'comment'],
    //   key: 'comment',
    //   ellipsis: true,
    //   render: (comment: string) => comment || <Text type="secondary">-</Text>
    // },
    {
      title: '操作',
      key: 'actions',
      width: 100,
      fixed: 'right',
      render: (_, record: ADBField) => (
        <Space size="small">
          <Button 
            type="text" 
            icon={<EditOutlined />} 
            size="small"
            onClick={() => handleEditField(record)}
          />
          <Popconfirm
            title="确定删除此字段？"
            description="删除后将无法恢复，相关关系也会被清除"
            onConfirm={() => handleDeleteField(record)}
            okText="删除"
            cancelText="取消"
            okButtonProps={{ danger: true }}
          >
            <Button 
              type="text" 
              icon={<DeleteOutlined />} 
              size="small"
              danger
            />
          </Popconfirm>
        </Space>
      )
    }
  ];

  return (
    <div style={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* 字段管理头部 */}
      <Space style={{ 
        height: 40,
        padding: '0 20px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center'
      }}>
        <div>
          {/* 使用Segmented组件替换原来的表名显示 */}
          <Segmented
            options={[
              { label: '字段', value: 'fields' },
              { label: '索引', value: 'indexes' },
              { label: '关系', value: 'relations' }
            ]}
            value={activeTab}
            onChange={(value) => setActiveTab(value as 'fields' | 'indexes' | 'relations')}
          />
        </div>
        <Space>
          {/* 根据当前活动的tab显示不同的按钮 */}
          {activeTab === 'fields' && (
            <Button 
              type="primary" 
              icon={<PlusOutlined />}
              onClick={handleCreateField}
            >
              新建字段
            </Button>
          )}
          {activeTab === 'relations' && (
            <Button 
              type="primary" 
              icon={<PlusOutlined />}
              onClick={handleCreateRelation}
            >
              新建关系
            </Button>
          )}
          {activeTab === 'indexes' && (
            <Button 
              type="primary" 
              icon={<PlusOutlined />}
              // onClick={handleCreateIndex} // TODO: 需要实现索引创建功能
            >
              新建索引
            </Button>
          )}
        </Space>
      </Space>
      
      {/* 字段列表内容区域 */}
      <div style={{ 
        flex: 1, 
        overflow: 'auto', 
        padding: '16px',
        backgroundColor: '#141414'
      }}>
        {/* 根据当前活动的tab显示不同的内容 */}
        {activeTab === 'fields' && (
          <>
            {/* 字段列表表格 */}
            {fields.length > 0 ? (
              <Table
                columns={columns}
                dataSource={fields}
                rowKey={(record) => record.columnInfo.id}
                size="small"
                scroll={{ x: 800 }}
                pagination={false}
              />
            ) : (
              <Empty 
                description="暂无字段，点击上方按钮新建字段"
                style={{ margin: '40px 0' }}
              />
            )}
          </>
        )}
        
        {activeTab === 'relations' && (
          <div>
            {entityRelations.length > 0 ? (
              <Table
                columns={relationColumns}
                dataSource={entityRelations}
                rowKey="id"
                size="small"
                scroll={{ x: 1000 }}
                pagination={false}
              />
            ) : (
              <Empty 
                description="暂无关系，点击上方按钮新建关系"
                style={{ margin: '40px 0' }}
              />
            )}
          </div>
        )}
        
        {activeTab === 'indexes' && (
          <div>
            <Empty 
              description="索引管理功能正在开发中"
              style={{ margin: '40px 0' }}
            />
          </div>
        )}
      </div>

      {/* 字段编辑模态框 */}
      <Modal
        title={editingField ? '编辑字段' : '新建字段'}
        open={isModalVisible}
        onCancel={() => {
          setIsModalVisible(false);
          setEditingField(null);
          setFormValues({
            code: '',
            label: '',
            type: '',
            nullable: false,
            unique: false,
            primary: false,
          });
        }}
        onOk={() => form.submit()}
        width={600}
        forceRender  // 强制渲染Modal内容，确保Form初始化
        afterOpenChange={(open) => {
          // 当Modal打开后，确保表单数据正确设置
          if (open && editingField) {
            const fieldValues = {
              code: editingField.columnInfo.code,
              label: editingField.columnInfo.label,
              comment: editingField.columnInfo.comment,
              status: editingField.columnInfo.status,
              orderIndex: editingField.columnInfo.orderIndex,
              type: editingField.columnInfo.extendType || editingField.typeormConfig.type,
              length: editingField.typeormConfig.length,
              nullable: editingField.typeormConfig.nullable,
              unique: editingField.typeormConfig.unique,
              default: editingField.typeormConfig.default,
              primary: editingField.typeormConfig.primary,
              precision: editingField.typeormConfig.precision,
              scale: editingField.typeormConfig.scale,
              generated: editingField.typeormConfig.generated,
              // 扩展类型配置
              extendType: editingField.columnInfo.extendType,
              mediaConfig: editingField.columnInfo.mediaConfig,
              enumConfig: editingField.columnInfo.enumConfig,
              autoIncrementIdConfig: editingField.columnInfo.autoIncrementIdConfig,
              guidIdConfig: editingField.columnInfo.guidIdConfig,
              snowflakeIdConfig: editingField.columnInfo.snowflakeIdConfig
            };
            form.setFieldsValue(fieldValues);
            setFormValues(fieldValues);
          } else if (open && !editingField) {
            // 新建字段时重置表单
            form.resetFields();
            setFormValues({
              code: '',
              label: '',
              type: '',
              nullable: false,
              unique: false,
              primary: false,
            });
          }
        }}
        maskClosable={false}
        destroyOnHidden={false}  // 保持Modal内容，确保Form实例连接
      >
        <Form
          form={form}
          onFinish={handleSaveField}
          onValuesChange={(_, allValues) => {
            // 更新表单值，但保护 type 字段不被意外清空
            setFormValues(prev => {
              const newValues = { ...prev, ...allValues };
              // 如果 type 字段在表单中存在且不为空，保持它
              if (allValues.type && allValues.type !== '') {
                newValues.type = allValues.type;
              } else if (prev.type && prev.type !== '') {
                // 如果表单中的 type 为空但之前有值，保持之前的值
                newValues.type = prev.type;
              }
              return newValues;
            });
          }}
          labelCol={{ span: 7 }}
          wrapperCol={{ span: 15 }}
          // labelWrap
          layout="horizontal"
          preserve={false}
          style={{ paddingTop: 30 }}
        >
          <Form.Item
            name="code"
            label="字段标识"
            hasFeedback
            rules={[
              { required: true, message: '请输入字段标识' },
              { pattern: /^[a-zA-Z][a-zA-Z0-9_]*$/, message: '字段标识只能包含字母、数字和下划线，且以字母开头' }
            ]}
          >
            <Input placeholder="例如: user_name" />
          </Form.Item>

          <Form.Item
            name="label"
            label="显示名称"
            rules={[{ required: true, message: '请输入显示名称' }]}
          >
            <Input placeholder="例如: 用户姓名" />
          </Form.Item>

          <Form.Item
            name="type"
            label="数据类型"
            rules={[{ required: true, message: '请选择数据类型' }]}
          >
            <Select 
              placeholder="选择数据类型"
              onChange={(value) => {
                // 当类型改变时，重置相关字段
                const config = getFieldTypeConfig(value);
                
                // 重置不适用的字段
                const resetFields: Record<string, unknown> = {};
                if (!config.length) resetFields.length = undefined;
                if (!config.precision) resetFields.precision = undefined;
                if (!config.scale) resetFields.scale = undefined;
                if (!config.default) resetFields.default = undefined;
                if (!config.unique) resetFields.unique = false;
                if (!config.primary) resetFields.primary = false;
                
                // ID类型特殊处理
                if (isIDType(value)) {
                  resetFields.nullable = false;
                  resetFields.unique = false;
                  resetFields.primary = false;
                  resetFields.default = undefined;
                }
                
                form.setFieldsValue(resetFields);
              }}
            >
              <Select.OptGroup label="TypeORM 原生类型">
                {typeormNativeTypes.map(type => (
                  <Option key={type.type} value={type.type}>
                    {type.label}
                  </Option>
                ))}
              </Select.OptGroup>
              <Select.OptGroup label="ADB 扩展类型">
                {adbExtendTypes.map(type => (
                  <Option key={type.type} value={type.type}>
                    {type.label}
                  </Option>
                ))}
              </Select.OptGroup>
            </Select>
          </Form.Item>

          {/* 智能提示 */}
          {formValues.type && getFieldTypeHint(formValues.type) && (
            <div style={{ 
              marginBottom: 16, 
              padding: '8px 12px', 
              backgroundColor: '#f6ffed22', 
              border: '1px solid #b7eb8f33', 
              borderRadius: 6,
              textAlign: 'center',
              fontSize: '12px',
              color: '#52c41a'
            }}>
              💡 {getFieldTypeHint(formValues.type)}
            </div>
          )}

          {/* 长度和精度配置 - 使用条件渲染，避免空白 Form.Item */}
          {formValues.type && requiresLengthConfig(formValues.type) && (
            <Form.Item
              name="length"
              label="长度"
              rules={[{ required: true, message: '请输入长度' }]}
            >
              <InputNumber min={1} max={65535} placeholder="字符长度" style={{ width: '100%' }} />
            </Form.Item>
          )}
          
          {formValues.type && requiresPrecisionConfig(formValues.type) && (
            <div style={{ display: 'flex', gap: 16 }}>
              <Form.Item
                name="precision"
                label="精度"
                style={{ flex: 1 }}
                rules={[{ required: true, message: '请输入精度' }]}
              >
                <InputNumber min={1} max={65} placeholder="总位数" style={{ width: '100%' }} />
              </Form.Item>
              {requiresScaleConfig(formValues.type) && (
                <Form.Item
                  name="scale"
                  label="小数位"
                  style={{ flex: 1 }}
                >
                  <InputNumber min={0} max={30} placeholder="小数位数" style={{ width: '100%' }} />
                </Form.Item>
              )}
            </div>
          )}

          {/* 基础配置项 - 智能显示 */}
          <div style={{ display: 'flex', gap: 16 }}>
            {/* 可为空 - 所有类型都显示，但ID类型强制为false */}
            <Form.Item
              name="nullable"
              label="可为空"
              valuePropName="checked"
              labelCol={{ span: 12 }}
              wrapperCol={{ span: 12 }}
              style={{ flex: 1 }}
            >
              <Switch 
                disabled={formValues.type ? isIDType(formValues.type) : false}
              />
            </Form.Item>

            {/* 唯一约束 - 根据类型智能显示 */}
            {formValues.type && shouldShowConfig(formValues.type, 'unique') && (
              <Form.Item
                name="unique"
                label="唯一约束"
                valuePropName="checked"
                labelCol={{ span: 12 }}
                wrapperCol={{ span: 12 }}
                style={{ flex: 1 }}
              >
                <Switch />
              </Form.Item>
            )}

            {/* 主键 - 根据类型智能显示 */}
            {formValues.type && shouldShowConfig(formValues.type, 'primary') && (
              <Form.Item
                name="primary"
                label="主键"
                valuePropName="checked"
                labelCol={{ span: 12 }}
                wrapperCol={{ span: 12 }}
                style={{ flex: 1 }}
              >
                <Switch />
              </Form.Item>
            )}
          </div>         

          {/* ADB 扩展类型配置 - 使用条件渲染，避免空白 Form.Item */}
          
          {/* ADB Media 配置 */}
          {formValues.type && shouldShowConfig(formValues.type, 'mediaConfig') && (
            <div>
              <Form.Item
                name={['mediaConfig', 'mediaType']}
                label="媒体类型"
                rules={[{ required: true, message: '请选择媒体类型' }]}
              >
                <Select placeholder="选择媒体类型">
                  <Option value="image">图片</Option>
                  <Option value="video">视频</Option>
                  <Option value="audio">音频</Option>
                  <Option value="document">文档</Option>
                  <Option value="file">文件</Option>
                </Select>
              </Form.Item>
              
              <Form.Item
                name={['mediaConfig', 'formats']}
                label="支持格式"
                rules={[{ required: true, message: '请输入支持的文件格式' }]}
              >
                <Select mode="tags" placeholder="输入文件格式，如: jpg, png, gif">
                  <Option value="jpg">JPG</Option>
                  <Option value="png">PNG</Option>
                  <Option value="gif">GIF</Option>
                  <Option value="webp">WEBP</Option>
                  <Option value="mp4">MP4</Option>
                  <Option value="pdf">PDF</Option>
                </Select>
              </Form.Item>
              
              <div style={{ display: 'flex', gap: 16 }}>
                <Form.Item
                  name={['mediaConfig', 'maxSize']}
                  label="最大限制(MB)"
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                >
                  <InputNumber min={1} placeholder="文件大小限制" style={{ width: '100%' }} />
                </Form.Item>
                
                <Form.Item
                  name={['mediaConfig', 'isMultiple']}
                  label="允许多文件"
                  valuePropName="checked"
                  style={{ flex: 1 }}
                  labelCol={{ span: 12 }}
                  wrapperCol={{ span: 12 }}
                >
                  <Switch />
                </Form.Item>
              </div>
              
              <Form.Item
                name={['mediaConfig', 'storagePath']}
                label="存储路径"
              >
                <Input placeholder="例如: uploads/avatars" />
              </Form.Item>
            </div>
          )}
          
          {/* ADB Enum 配置 */}
          {formValues.type && shouldShowConfig(formValues.type, 'enumConfig') && (
            <div>
              <Form.Item
                name={['enumConfig', 'enum']}
                label="选择枚举"
                rules={[{ required: true, message: '请选择枚举' }]}
              >
                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                    <span style={{ flex: 1, color: "#177ddc" }}>
                      {selectedEnumCode ? enumDisplayText : '未选择'}
                    </span>
                    {selectedEnumCode ? (
                      <Button 
                        type="link" 
                        size="small" 
                        onClick={handleEnumClear}
                        style={{ padding: 0, color: '#888' }}
                      >
                        清空选择
                      </Button>
                    ) : (
                      <Button 
                        type="primary" 
                        size="small" 
                        onClick={() => setIsEnumSelectModalVisible(true)}
                      >
                        请选择
                      </Button>
                    )}
                </div>
              </Form.Item>
              
              <Form.Item
                name={['enumConfig', 'isMultiple']}
                label="多选模式"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
              
              {/* <Form.Item
                name={['enumConfig', 'default']}
                label="默认值"
              >
                {(() => {
                  const enumOptions = getCurrentEnumOptions();
                  const defaultValueOptions = getDefaultValueOptions(formValues.type, enumOptions);
                  
                  if (defaultValueOptions && defaultValueOptions.length > 1) {
                    return (
                      <Select placeholder="选择默认值" showSearch>
                        {defaultValueOptions.map(option => (
                          <Option key={option.value} value={option.value}>
                            {option.label}
                          </Option>
                        ))}
                      </Select>
                    );
                  }
                  return <Input placeholder="枚举默认值" />;
                })()}
              </Form.Item> */}
            </div>
          )}
          
          {/* Auto Increment ID 配置 */}
          {formValues.type && shouldShowConfig(formValues.type, 'autoIncrementIdConfig') && (
            <div>
              <div style={{ display: 'flex', gap: 16 }}>
                <Form.Item
                  name={['autoIncrementIdConfig', 'startValue']}
                  label="起始值"
                  style={{ flex: 1 }}
                >
                  <InputNumber min={1} placeholder="起始值" style={{ width: '100%' }} />
                </Form.Item>
                
                <Form.Item
                  name={['autoIncrementIdConfig', 'increment']}
                  label="增量"
                  style={{ flex: 1 }}
                >
                  <InputNumber min={1} placeholder="增量" style={{ width: '100%' }} />
                </Form.Item>
              </div>
              
              <Form.Item
                name={['autoIncrementIdConfig', 'sequenceName']}
                label="序列名称"
              >
                <Input placeholder="PostgreSQL序列名称" />
              </Form.Item>
              
              <Form.Item
                name={['autoIncrementIdConfig', 'isPrimaryKey']}
                label="是否主键"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </div>
          )}
          
          {/* GUID ID 配置 */}
          {formValues.type && shouldShowConfig(formValues.type, 'guidIdConfig') && (
            <div>
              <Space style={{ width: '100%' }}>
                <Form.Item
                  name={['guidIdConfig', 'version']}
                  label="GUID版本"
                  style={{ flex: 1 }}
                >
                  <Select placeholder="选择版本">
                    <Option value="v1">V1 - 基于时间戳</Option>
                    <Option value="v4">V4 - 随机（推荐）</Option>
                    <Option value="v5">V5 - 基于命名空间</Option>
                  </Select>
                </Form.Item>
                
                <Form.Item
                  name={['guidIdConfig', 'format']}
                  label="格式"
                  style={{ flex: 1 }}
                >
                  <Select placeholder="选择格式">
                    <Option value="default">标准格式</Option>
                    <Option value="braced">大括号格式</Option>
                    <Option value="binary">二进制格式</Option>
                    <Option value="urn">URN格式</Option>
                  </Select>
                </Form.Item>
              </Space>
              
              <Form.Item
                name={['guidIdConfig', 'isPrimaryKey']}
                label="是否主键"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
              
              <Form.Item
                name={['guidIdConfig', 'generateOnInsert']}
                label="插入时自动生成"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </div>
          )}
          
          {/* Snowflake ID 配置 */}
          {formValues.type && shouldShowConfig(formValues.type, 'snowflakeIdConfig') && (
            <div>
              <div style={{ display: 'flex', gap: 16 }}>
                <Form.Item
                  name={['snowflakeIdConfig', 'machineId']}
                  label="机器ID"
                  style={{ flex: 1 }}
                >
                  <InputNumber min={0} max={1023} placeholder="0-1023" style={{ width: '100%' }} />
                </Form.Item>
                
                <Form.Item
                  name={['snowflakeIdConfig', 'datacenterId']}
                  label="数据中心ID"
                  style={{ flex: 1 }}
                >
                  <InputNumber min={0} max={31} placeholder="0-31" style={{ width: '100%' }} />
                </Form.Item>
              </div>
              
              <div style={{ display: 'flex', gap: 16 }}>
                <Form.Item
                  name={['snowflakeIdConfig', 'format']}
                  label="输出格式"
                  style={{ flex: 1 }}
                >
                  <Select placeholder="选择格式">
                    <Option value="number">数字格式（推荐）</Option>
                    <Option value="string">字符串格式</Option>
                  </Select>
                </Form.Item>
                
                <Form.Item
                  name={['snowflakeIdConfig', 'isPrimaryKey']}
                  label="是否主键"
                  valuePropName="checked"
                  style={{ flex: 1 }}
                >
                  <Switch />
                </Form.Item>
              </div>
              
              <Form.Item
                name={['snowflakeIdConfig', 'generateOnInsert']}
                label="插入时自动生成"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </div>
          )}

          {/* 默认值 - 根据类型智能显示 */}
          {formValues.type && shouldShowConfig(formValues.type, 'default') && (
            <Form.Item
              name="default"
              label="默认值"
            >
              {(() => {
                const enumOptions = getCurrentEnumOptions();
                const defaultValueOptions = getDefaultValueOptions(formValues.type, enumOptions);
                if (defaultValueOptions) {
                  return (
                    <Select 
                      placeholder="选择或输入默认值" 
                      allowClear
                      showSearch
                      filterOption={(input, option) => {
                        // 允许搜索选项
                        return option?.children?.toString().toLowerCase().includes(input.toLowerCase()) || false;
                      }}
                      popupRender={(menu) => (
                        <div>
                          {menu}
                          <div style={{ padding: '8px 12px', fontSize: '12px', color: '#666' }}>
                            💡 您可以直接输入自定义值
                          </div>
                        </div>
                      )}
                    >
                      {defaultValueOptions.map(option => (
                        <Option key={option.value} value={option.value}>
                          {option.label}
                        </Option>
                      ))}
                    </Select>
                  );
                }
                return <Input placeholder="字段默认值（可选）" />;
              })()}
            </Form.Item>
          )}
          
          {/* 关系配置 - 仅对支持关系配置的字段类型显示 */}
          {formValues.type && supportsRelationConfig(formValues.type) && (
            <div style={{ 
              border: '1px solid #424242', 
              borderRadius: 6, 
              padding: 16, 
              marginTop: 16,
              backgroundColor: '#1f1f1f'
            }}>
              <div style={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center', 
                marginBottom: 16 
              }}>
                <div style={{ fontWeight: 'bold', color: '#1890ff' }}>
                  🔗 关系配置
                </div>
                <Form.Item 
                  name="enableRelation" 
                  valuePropName="checked" 
                  noStyle
                >
                  <Switch />
                </Form.Item>
              </div>
              
              <Form.Item 
                noStyle 
                shouldUpdate={(prevValues, currentValues) => 
                  prevValues.enableRelation !== currentValues.enableRelation
                }
              >
                {({ getFieldValue }) => 
                  getFieldValue('enableRelation') && (
                    <>
                      <Form.Item
                        name="relationType"
                        label="关系类型"
                        rules={[{ required: true, message: '请选择关系类型' }]}
                      >
                        <Select placeholder="选择关系类型">
                          <Option value="manyToOne">多对一 (ManyToOne)</Option>
                          <Option value="oneToOne">一对一 (OneToOne)</Option>
                        </Select>
                      </Form.Item>
                      
                      <Form.Item
                        name="targetEntity"
                        label="目标实体"
                        rules={[{ required: true, message: '请选择目标实体' }]}
                      >
                        <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                          <span style={{ flex: 1, color: '#177ddc' }}>
                            {getFieldValue('targetEntityName') || '未选择实体'}
                          </span>
                          <Button 
                            type="primary" 
                            size="small" 
                            onClick={() => setIsEntitySelectModalVisible(true)}
                          >
                            选择实体
                          </Button>
                        </div>
                      </Form.Item>
                      
                      <Form.Item
                        name="targetField"
                        label="目标字段"
                        rules={[{ required: true, message: '请选择目标字段' }]}
                      >
                        <Select placeholder="选择目标字段">
                          {getFieldOptionsForEntity(getFieldValue('targetEntity')).map(option => (
                            <Option key={option.value} value={option.value}>
                              {option.label}
                            </Option>
                          ))}
                        </Select>
                      </Form.Item>
                      
                      <Form.Item
                        name="relationName"
                        label="关系名称"
                      >
                        <Input placeholder="例如: user, orders" />
                      </Form.Item>
                    </>
                  )
                }
              </Form.Item>
            </div>
          )
        }
        </Form>
      </Modal>

      {/* 关系管理模态框 */}
      <Modal
        title="关系管理"
        open={isRelationModalVisible}
        onCancel={() => setIsRelationModalVisible(false)}
        footer={null}
        width={1200}
        destroyOnHidden
        maskClosable={false}
      >
        <RelationManager 
          project={project}
          onProjectUpdate={onEntityUpdate}
        />
      </Modal>

      {/* ADB枚举管理模态框 */}
      <ADBEnumManager
        visible={isEnumModalVisible}
        onClose={() => setIsEnumModalVisible(false)}
        project={project}
        onProjectUpdate={onEntityUpdate}
      />

      {/* 枚举选择模态框 */}
      <EnumSelectModal
        visible={isEnumSelectModalVisible}
        onCancel={() => setIsEnumSelectModalVisible(false)}
        onConfirm={(enumCode) => {
          if (enumCode) {
            handleEnumSelect(enumCode);
            setIsEnumSelectModalVisible(false);
          } else {
            message.warning("请选择一个枚举");
          }
        }}
        project={project}
        selectedEnumCode={selectedEnumCode}
      />
      
      {/* 实体选择模态框 */}
      <EntitySelectModal
        visible={isEntitySelectModalVisible}
        onCancel={() => setIsEntitySelectModalVisible(false)}
        onConfirm={(entityId, entityName) => {
          form.setFieldsValue({
            targetEntity: entityId,
            targetEntityName: entityName
          });
          setIsEntitySelectModalVisible(false);
        }}
        project={project}
      />

      {/* 关系创建模态框 */}
      <Modal
        title={editingRelationInFields ? '编辑关系' : '新建关系'}
        open={isRelationCreateModalVisible}
        onOk={handleSaveRelation}
        onCancel={() => {
          setIsRelationCreateModalVisible(false);
          setEditingRelationInFields(null);
          setRelationValidationResult(null);
          setRelationConflicts([]);
        }}
        width={800}
        okText="保存"
        cancelText="取消"
        maskClosable={false}
        destroyOnHidden
      >
        <Form
          form={relationForm}
          layout="vertical"
          onFinish={handleSaveRelation}
          initialValues={{
            cascade: false,
            onDelete: CascadeType.RESTRICT,
            onUpdate: CascadeType.RESTRICT,
            nullable: true,
            eager: false,
            lazy: true,
          }}
          style={{ paddingTop: 30 }}
        >
          {/* 基本信息 */}
          <Title level={5}>基本信息</Title>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="type"
                label="关系类型"
                rules={[{ required: true, message: '请选择关系类型' }]}
              >
                <Select placeholder="选择关系类型">
                  <Option value={RelationType.ONE_TO_ONE}>一对一 (OneToOne)</Option>
                  <Option value={RelationType.ONE_TO_MANY}>一对多 (OneToMany)</Option>
                  <Option value={RelationType.MANY_TO_ONE}>多对一 (ManyToOne)</Option>
                  <Option value={RelationType.MANY_TO_MANY}>多对多 (ManyToMany)</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="name"
                label="关系名称"
                rules={[{ required: true, message: '请输入关系名称' }]}
              >
                <Input placeholder="关系名称" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="fromEntityId"
                label="源实体"
                rules={[{ required: true, message: '请选择源实体' }]}
              >
                <Select placeholder="选择源实体" disabled={!!editingRelationInFields}>
                  {entities.map(entity => (
                    <Option key={entity.entityInfo.id} value={entity.entityInfo.id}>
                      {entity.entityInfo.label || entity.entityInfo.code}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="toEntityId"
                label="目标实体"
                rules={[{ required: true, message: '请选择目标实体' }]}
              >
                <Select placeholder="选择目标实体">
                  {entities.map(entity => (
                    <Option key={entity.entityInfo.id} value={entity.entityInfo.id}>
                      {entity.entityInfo.label || entity.entityInfo.code}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="inverseName"
            label="反向关系名称"
          >
            <Input placeholder="反向关系名称（可选）" />
          </Form.Item>

          <Form.Item
            name="description"
            label="关系描述"
          >
            <Input.TextArea placeholder="关系描述（可选）" rows={3} />
          </Form.Item>

          {/* 关系配置 */}
          <Divider />
          <Title level={5}>关系配置</Title>
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="cascade"
                label="级联操作"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="nullable"
                label="可为空"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="eager"
                label="立即加载"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="onDelete"
                label="删除策略"
              >
                <Select>
                  <Option value={CascadeType.CASCADE}>级联 (CASCADE)</Option>
                  <Option value={CascadeType.SET_NULL}>设为空 (SET NULL)</Option>
                  <Option value={CascadeType.RESTRICT}>限制 (RESTRICT)</Option>
                  <Option value={CascadeType.NO_ACTION}>无操作 (NO ACTION)</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="onUpdate"
                label="更新策略"
              >
                <Select>
                  <Option value={CascadeType.CASCADE}>级联 (CASCADE)</Option>
                  <Option value={CascadeType.SET_NULL}>设为空 (SET NULL)</Option>
                  <Option value={CascadeType.RESTRICT}>限制 (RESTRICT)</Option>
                  <Option value={CascadeType.NO_ACTION}>无操作 (NO ACTION)</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          {/* 多对多关系配置 */}
          {relationForm.getFieldValue('type') === RelationType.MANY_TO_MANY && (
            <>
              <Divider />
              <Title level={5}>中间表配置</Title>
              <Row gutter={16}>
                <Col span={8}>
                  <Form.Item
                    name="joinTableName"
                    label="中间表名称"
                    rules={[{ required: true, message: '请输入中间表名称' }]}
                  >
                    <Input placeholder="中间表名称" />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    name="joinColumn"
                    label="连接列名称"
                    rules={[{ required: true, message: '请输入连接列名称' }]}
                  >
                    <Input placeholder="连接列名称" />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    name="inverseJoinColumn"
                    label="反向连接列名称"
                    rules={[{ required: true, message: '请输入反向连接列名称' }]}
                  >
                    <Input placeholder="反向连接列名称" />
                  </Form.Item>
                </Col>
              </Row>
            </>
          )}

          {/* 验证结果 */}
          {relationValidationResult && (
            <>
              <Divider />
              <Title level={5}>验证结果</Title>
              {relationValidationResult.errors.length > 0 && (
                <Alert
                  message="验证错误"
                  description={
                    <ul style={{ margin: 0, paddingLeft: 20 }}>
                      {relationValidationResult.errors.map((error, index) => (
                        <li key={index}>{error.message}</li>
                      ))}
                    </ul>
                  }
                  type="error"
                  showIcon
                  style={{ marginBottom: 16 }}
                />
              )}
              {relationValidationResult.warnings.length > 0 && (
                <Alert
                  message="验证警告"
                  description={
                    <ul style={{ margin: 0, paddingLeft: 20 }}>
                      {relationValidationResult.warnings.map((warning, index) => (
                        <li key={index}>{warning.message}</li>
                      ))}
                    </ul>
                  }
                  type="warning"
                  showIcon
                  style={{ marginBottom: 16 }}
                />
              )}
              {relationValidationResult.isValid && relationValidationResult.errors.length === 0 && (
                <Alert
                  message="验证通过"
                  description="关系配置验证通过，可以保存。"
                  type="success"
                  showIcon
                  style={{ marginBottom: 16 }}
                />
              )}
            </>
          )}

          {/* 冲突检测 */}
          {relationConflicts.length > 0 && (
            <>
              <Divider />
              <Title level={5}>冲突检测</Title>
              <Alert
                message="检测到关系冲突"
                description={
                  <ul style={{ margin: 0, paddingLeft: 20 }}>
                    {relationConflicts.map((conflict, index) => (
                      <li key={index}>
                        {conflict.message}
                        {conflict.suggestion && (
                          <div style={{ color: '#666', fontSize: '12px' }}>
                            建议：{conflict.suggestion}
                          </div>
                        )}
                      </li>
                    ))}
                  </ul>
                }
                type="error"
                showIcon
                style={{ marginBottom: 16 }}
              />
            </>
          )}
        </Form>
      </Modal>
    </div>
  );



  // 处理保存关系
  const handleSaveRelation = async () => {
    try {
      const values = await relationForm.validateFields();
      
      const config: RelationCreateConfig = {
        type: values.type,
        fromEntityId: values.fromEntityId || entity.entityInfo.id, // 如果没有选择源实体，默认为当前实体

